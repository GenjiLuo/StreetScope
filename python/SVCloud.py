#!/usr/bin/python

#from elementtree.ElementTree import Element, SubElement, dump
import xml.etree.ElementTree
import StringIO
import Image
import ImageOps
from common import *
from get_panorama import get_panorama_image

# Local Test Server
#db_url = "http://localhost/fcgi/main.fcgi"
#db_pano_url = "http://localhost/panos/"

# Cloud Server
db_url = "http://23.23.248.157/fcgi/main.fcgi"
db_pano_url = "http://23.23.248.157/panos/"

print_urls = False

# Converts a yaw as stored by Google (degrees clockwise from north)
# to our azimuthal angle.
def convertYaw(theta):
    if theta <= 90.0:
        return 90.0 - theta
    else:
        return 450.0 - theta

# Reads a PhotoMetadata xml node as generated by the database server.
# Note that we only extract the information we may need,
# thus some fields of the Panorama object are left blank.
def read_db_pano_xml(xml):
   pano = Panorama()
   location_node = xml.find("Location")
   orientation_node = xml.find("Orientation")
   tag_nodes = xml.find("Tags")
   edge_nodes = xml.find("Edges")

   pano.dbid = int(xml.get("id"))
   pano.panoid = xml.get("pano_id")
   pano.indb = True
   pano.location.lat = float(location_node.get("lat")) 
   pano.location.lon = float(location_node.get("lon"))
   pano.panoYaw   = float(orientation_node.get("panoYaw"))
   pano.tiltYaw   = float(orientation_node.get("tiltYaw"))
   pano.tiltPitch = float(orientation_node.get("tiltPitch"))

   for tag in tag_nodes:
      theta1 = float(tag.get("theta1"))
      phi1   = float(tag.get("phi1"))
      theta2 = float(tag.get("theta2"))
      phi2   = float(tag.get("phi2"))
      pano.addTag(theta1, phi1, theta2, phi2)

   for edge in edge_nodes:
      angle = float(edge.get("angle"))
      panoid = edge.get("pano_id")
      pano.addEdge(angle, panoid)

   return pano

# Reads a panorama xml node as generated by GSV.
# All fields are populated except dbid.
def read_sv_pano_xml(xml):
   pano = Panorama()
   prop_node = xml.find("data_properties")
   proj_node = xml.find("projection_properties")
   anno_node = xml.find("annotation_properties")

   pano.panoid = prop_node.get("pano_id")
   pano.indb = False
   pano.location.lat = float(prop_node.get("lat"))
   pano.location.lon = float(prop_node.get("lng"))
   pano.origLocation.lat = float(prop_node.get("original_lat"))
   pano.origLocation.lon = float(prop_node.get("original_lng"))
   capDate = prop_node.get("image_date").split("-")
   pano.capYear = int(capDate[0])
   pano.capMonth = int(capDate[1])
   pano.panoYaw = convertYaw(float(proj_node.get("pano_yaw_deg")))
   pano.tiltYaw = convertYaw(float(proj_node.get("tilt_yaw_deg")))
   pano.tiltPitch = float(proj_node.get("tilt_pitch_deg"))

   for link in anno_node:
      angle = convertYaw(float(link.get("yaw_deg")))
      panoid = link.get("pano_id")
      pano.addEdge(angle, panoid)

   return pano

# Attempts to find a panorama in the database near the specified
# location with the specified panoid.
def get_db_metadata(location, panoid):
   url = db_url + "?cmd=pano_id_near"
   url += "&lat=" + str(location.lat)
   url += "&lon=" + str(location.lon)
   url += "&pano_id=" + panoid
   if print_urls: print url
   result = fetch(url)
   if result['status'] != 200:
      return None
   doc = xml.etree.ElementTree.fromstring(result['data'])
   if len(doc) == 0:
      return None
   return read_db_pano_xml(doc.find("PhotoMetadata"))

# Gets the metadata associated with a panorama in GSV.
def get_sv_metadata(panoid):
   url = 'http://cbk0.google.com/cbk?output=xml&panoid=' + panoid
   if print_urls: print url
   result = fetch(url)
   if result['status'] != 200:
      return None
   doc = xml.etree.ElementTree.fromstring(result['data'])
   if len(doc) == 0:
      return None
   return read_sv_pano_xml(doc)

# Gets metadata from the database for panoramas close to the specified location.
def get_nearby_db_metadata(location):
   url = db_url + "?cmd=panos_near"
   url += "&lat=" + str(location.lat)
   url += "&lon=" + str(location.lon)
   if print_urls: print url
   result = fetch(url)
   if result['status'] != 200:
      return []
   doc = xml.etree.ElementTree.fromstring(result['data'])
   if len(doc) == 0:
      return []
   panos = []
   for pano in doc:
      panos.append(read_db_pano_xml(pano))
   return panos

# Gets metadata from GSV for a panorama near the specified point (if there is one)
def get_nearby_sv_metadata(location):
   url = "http://cbk0.google.com/cbk?output=xml"
   url += "&ll=" + str(location.lat) + ',' + str(location.lon)
   if print_urls: print url
   result = fetch(url)
   if result['status'] != 200:
      return None
   doc = xml.etree.ElementTree.fromstring(result['data'])
   if len(doc) == 0:
      return None
   return read_sv_pano_xml(doc)

# Fetches a panorama (image) from the database.
def get_db_pano(dbid):
   print "Fetching panorama " + str(dbid) + " from the database."
   url = db_pano_url + str(dbid) + '.jpg'
   if print_urls: print url
   result = fetch(url)
   if result['status'] != 200:
      return None
   imgdata = StringIO.StringIO(result['data'])
   img = Image.open(imgdata)
   #img.save("/home/erik/Code/streetview_demo/test_db.jpg")
   return img

# Fetches a panorama (image) from GSV.
def get_sv_pano(panoid, zoom):
   print "Fetching panorama " + str(panoid) + " from Google Stret View."
   img = ImageOps.mirror(get_panorama_image(panoid, zoom))
   #img.save("/home/erik/Code/streetview_demo/test_sv.jpg")
   return img

# Requests that the database downloads the specified panorama.
def download_pano(panoid):
   print "Downloading pano " + panoid + "..."
   url = db_url + "?cmd=download_pano"
   url += "&pano_id=" + panoid
   if print_urls: print url
   result = fetch(url)
   if result['status'] != 200:
      print "Download failed."
      return None
   doc = xml.etree.ElementTree.fromstring(result['data'])
   if len(doc) == 0:
      print "Download failed."
      return None
   print "Done."
   return read_db_pano_xml(doc.find("PhotoMetadata"))

# Adds a new tag to the database.
def new_tag(dbid, t1, p1, t2, p2):
   print "Adding new tag to pano ", dbid
   url = db_url + "?cmd=new_tag"
   url += "&id=" + str(dbid)
   url += "&t1=" + str(t1)
   url += "&p1=" + str(p1)
   url += "&t2=" + str(t2)
   url += "&p2=" + str(p2)
   if print_urls: print url
   result = fetch(url)
   if result['status'] != 200:
      return False
   doc = xml.etree.ElementTree.fromstring(result['data'])
   if doc.text == "success":
      return True
   return False

# Removes a tag from the database.
def remove_tag(dbid, tag):
   print "Removing tag", tag, "from pano", dbid
   url = db_url + "?cmd=remove_tag"
   url += "&id=" + str(dbid)
   url += "&tag=" + str(tag)
   if print_urls: print url
   result = fetch(url)
   if result['status'] != 200:
      return False
   doc = xml.etree.ElementTree.fromstring(result['data'])
   if doc.text == "success":
      return True
   return False

def main():
   loc = Location(41.791412, -87.599319)
   #panoid = "f_pb20aAlbt4AF1jpwpw_g"
   panoid = "zsNoGkM2GOs2Ebr3QRMZSw"
   #pano = findByPanoId(loc, "f_pb20aAlbt4AF1jpwpw_g")
   img = get_panorama_image(panoid, 3)
   img.save("/home/erik/Code/streetview_demo/dltest.jpg")
   return

   pano = get_sv_pano_metadata("f_pb20aAlbt4AF1jpwpw_g")
   if not pano:
      print "no pano found"
   else:
      print pano.dbid, pano.panoid, pano.location.lat, pano.location.lon, pano.panoYaw

if __name__ == '__main__': 
   main()
